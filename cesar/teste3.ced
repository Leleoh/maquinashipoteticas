;Leonel Ferraz Hernandez - 00585121 - Professor Sérgio Cechin
;============================================================
;Referência para o desenvolvimento			
;============================================================
;	CESAR 2024.1
;
;	Áreas de memória:
;	0000 - 7FFF		PROGRAMA
;					Área reservada para as funções e o stack
;	
;	7F00			Fundo da pilha
;
;	7F00H - 7F01	Início da função de relógio
;	
;	7F02 - 7F03		Início da função leitura string
;
;	7F04 - 7F05		Início da função movimenta letras
;
;	7F06 - FF7F		Área livre (cuidar para deixar limpo)
;
;	FF80 - FFBF 	PERIFERICOS16
;					Área dos periféricos
;
;	FFC0 - FFFF		PERIFERICOS8
;					Área dos periféricos
;
;	8000 - FF7F		APP
;					Posição onde o programa será colocado e as funções utilizadas
;
;===========================================================
;Atribuindo variáveis
;===========================================================

PROGRAMA:		equ H0000
APP: 			equ H8000
PERIFERICOS16:	equ HFF80
PERIFERICOS8:	equ HFFC0

;===========================================================
;Área reservada para os periféricos
;===========================================================

;Acesso em 16 bits
		org		PERIFERICOS16
STACK:
		daw		[31];Area reservada
IVET: 	dw 0		;Vetor de interrupção
	
;Acesso em 8 bits
		org PERIFERICOS8
		dab [23]
TIMDT:	db		0		; Base de tempo do timer
INTS:	db		0		; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db		0		; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db		0		; Status do teclado
TECDT:	db		0		; Dado do teclado
VISOR:	dab		[36]	; Portas de acesso ao visor

;============================================================
;Início do programa principal
;============================================================
		org PROGRAMA
		
;1) Desabilitando o sistema de interrupções
	CLR INTE
	CLR INTS

;2)Setando o timer para gerar interrupção a cada "100ms"
	mov #isr, IVET	;Rotina de interrupção
	mov #100, TIMDT ;Interrupção 100ms

;Inicializa o processador e o hardware !IMPORTANTE
	mov		#STACK,r6
	
;Inicializa relógio
	mov		#4,r0
	mov		#Relogio,r1

;Reserva um byte para tecla
Tecla: 	db 0


loop_relogio:
	clr		(r1)+
	sob		r0,loop_relogio
	
;Limpa o visor
	mov		#36,r0
	mov		#VISOR,r1
loop_reset:
	mov		#' ',(r1)
	inc		r1
	sob		r0,loop_reset
		
;==========================================================================
;	Programa principal
;	Responsável por atualizar a informação do relógio no visor.
main:
	mov		#h81,INTE
loop_main:

	; Coloca o Relogio no visor
	mov		Hora,r0
	mov		#VISOR,r1
	jsr		r7,dspDec
	
	mov		#':',VISOR+2

	mov		Minuto,r0
	mov		#VISOR+3,r1
	jsr		r7,dspDec
	
	mov		#':',VISOR+5

	mov		Segundo,r0
	mov		#VISOR+6,r1
	jsr		r7,dspDec

	br		loop_main

;--------------------------------------------------------------------------
;	Coloca um número de 2 digitos no visor
;	r0 -> valor
;	r1 -> posição no visor
;	dspDec = Display Decimal
dspDec:
	clr		r2
dspDec_2:
	cmp		r0,#10
	blt		dspDec_1
	sub		#10,r0
	inc		r2
	br		dspDec_2
dspDec_1:
	add		#'0',r2
	add		#'0',r0
	mov		r2,(r1)
	inc		r1
	mov		r0,(r1)
	rts		r7
		
;--------------------------------------------------------------------------
;	O relógio é formado por 6 palavras, cada uma representando uma parte do relógio.
Relogio:
Hora:		dw	0
Minuto:		dw	0
Segundo:	dw	0
Decimos:	dw	0


;==========================================================================
; Rotina de INTERRUPÇÃO
isr:
	mov		r0,-(r6)	; Salva registradores (não é necessário salvar o R5)
	mov		r1,-(r6)
	mov		r2,-(r6)
	mov		r3,-(r6)
	mov		r4,-(r6)
	mov		r5,-(r6)

	;Interrupção timer
	mov		INTS,r0		; Verifica se é INT do TIMER
	and		#1,r0
	beq		ISR2
	jsr		r7,ISRtim	; Tratamento da INT do TIMER
	and		#hFFFE,INTS	; Desliga bit de INT TIMER
	
	;Interrupção teclado
	mov INTS, r0		;Verifica se é INT do teclado
	and #2, r0			;Compara r0 com 2
	beq	ISR2
	jsr r7, ISRtec		;Tratamento da int do teclado
	and #HFFFD, INTS	;Desliga bit de INT teclado
	
ISR2:

	mov		(r6)+,r5	; Retorna os registradores da pilha
	mov		(r6)+,r4
	mov		(r6)+,r3
	mov		(r6)+,r2
	mov		(r6)+,r1
	mov		(r6)+,r0

	rti					; Return From Interrupt
	

;==========================================================================
;	Tratamento das interrupções de timer
;==========================================================================
ISRtim:
	inc		Decimos
	cmp		Decimos,#10
	blt		ISRtim_Fim
	clr		Decimos

	inc		Segundo
	cmp		Segundo,#60
	blt		ISRtim_Fim
	clr		Segundo

	inc		Minuto
	cmp		Minuto,#60
	blt		ISRtim_Fim
	clr		Minuto

	inc		Hora
	cmp		Hora,#24
	blt		ISRtim_Fim
	clr		Hora

ISRtim_Fim:
	rts		r7

;==================================================
;Tratamento da interrupção do teclado
;=================================================
ISRtec:
	mov TECDT, r0
	cmp #'M', r0
	beq incrementa_minutos
	cmp #'m', r0
	beq incrementa_minutos
	cmp #'H', r0
	beq incrementa_horas
	cmp #'h', r0
	beq	incrementa_horas
	cmp #'Z', r0
	beq zera_horas
	cmp #'z', r0
	beq zera_horas
	
	jmp ISRTEC_fim
	
	
incrementa_minutos:
	inc Minuto
	cmp Minuto, #60
	blt ISRtec_fim
	clr Minuto

incrementa_horas:
	inc Hora
	cmp Hora, #24
	blt ISRtec_fim
	clr Hora
	
zera_horas:
	clr Hora
	clr Minuto
	clr Segundo
	
ISRTEC_fim:
	clr TECST
	rts r7