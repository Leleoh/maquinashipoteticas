;Leonel Ferraz Hernandez - 00585121 - Professor Sérgio Cechin
;============================================================
;Referência para o desenvolvimento			
;============================================================
;	CESAR 2024.1
;
;	Áreas de memória:
;	0000 - 7FFF		PROGRAMA
;					Área reservada para as funções e o stack
;	
;	7F00			Fundo da pilha
;
;	7F00H - 7F01	Início da função de relógio
;	
;	7F02 - 7F03		Início da função leitura string
;
;	7F04 - 7F05		Início da função movimenta letras
;
;	7F06 - FF7F		Área livre (cuidar para deixar limpo)
;
;	FF80 - FFBF 	PERIFERICOS16
;					Área dos periféricos
;
;	FFC0 - FFFF		PERIFERICOS8
;					Área dos periféricos
;
;	8000 - FF7F		APP
;					Posição onde o programa será colocado e as funções utilizadas
;
;===========================================================
;Atribuindo variáveis
;===========================================================

	org H7F00
STACK:
endereco1: 		dw programa1
endereco2:		dw programa2
endereco3:		dw programa3

	org H8000
MOV #0,R0				; Chama a função de Relógio
JSR R7,(H7F00(R0)) 		
MOV #2,R0 				; Chama a função de Leitura de String
JSR R7,(H7F00(R0))
MOV #4,R0 				; Chama a função de Movimentação
JSR R7,(H7F00(R0))
HLT

;===========================================================
;Área reservada para os periféricos
;===========================================================

;Acesso em 16 bits
		org		HFF80

		daw		[31];Area reservada
IVET: 	dw 0		;Vetor de interrupção
	
;Acesso em 8 bits
		org 	HFFC0
		dab [23]
TIMDT:	db		0		; Base de tempo do timer
INTS:	db		0		; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db		0		; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db		0		; Status do teclado
TECDT:	db		0		; Dado do teclado
VISOR:	dab		[36]	; Portas de acesso ao visor

;============================================================
;Início do programa principal
;============================================================
		org H0000
		
;1) Desabilitando o sistema de interrupções
	CLR INTE
	CLR INTS

;Inicializa o processador e o hardware !IMPORTANTE
	mov		#STACK,r6
	jmp 	H8000
	programa1:			
		mov #isr, IVET	;Rotina de interrupção
		mov #100, TIMDT ;Interrupção 100ms
	
;Inicializa relógio
	mov		#4,r0
	mov		#Relogio,r1

;Reserva um byte para tecla
Tecla: 	db 0


loop_relogio:
	clr		(r1)+
	sob		r0,loop_relogio
	
;Limpa o visor
	mov		#36,r0
	mov		#VISOR,r1
loop_reset:
	mov		#' ',(r1)
	inc		r1
	sob		r0,loop_reset
		
;==========================================================
;Programa principal
;==========================================================
main:
	mov		#h83,INTE
loop_main:

	; Coloca o Relogio no visor
	cmp		Saida, #1
	beq		fim
	mov		Hora,r0
	mov		#VISOR,r1
	jsr		r7,dspDec
	
	mov		#':',VISOR+2

	mov		Minuto,r0
	mov		#VISOR+3,r1
	jsr		r7,dspDec
	
	mov		#':',VISOR+5

	mov		Segundo,r0
	mov		#VISOR+6,r1
	jsr		r7,dspDec

	br		loop_main

fim:
	mov		#36,r0
	mov		#VISOR,r1
loop_reset_fim:
	mov		#' ',(r1)
	inc		r1
	sob		r0,loop_reset_fim
	clr INTE
	clr INTS
	clr TIMDT
	clr r0
	clr r1
	clr r2
	clr r3
	clr r4
	clr r5
	rts r7
	
dspDec:
	clr		r2
dspDec_2:
	cmp		r0,#10
	blt		dspDec_1
	sub		#10,r0
	inc		r2
	br		dspDec_2
dspDec_1:
	add		#'0',r2
	add		#'0',r0
	mov		r2,(r1)
	inc		r1
	mov		r0,(r1)
	rts		r7
		
;==========================================================
;Variáveis
;==========================================================
Relogio:
Hora:		dw	0
Minuto:		dw	0
Segundo:	dw	0
Decimos:	dw	0
Saida:		db 	0


;==========================================================
; Rotina de INTERRUPÇÃO
;==========================================================
isr:
	mov		r0,-(r6)	; Salva registradores (não é necessário salvar o R5)
	mov		r1,-(r6)
	mov		r2,-(r6)
	mov		r3,-(r6)
	mov		r4,-(r6)
	mov		r5,-(r6)

	;Interrupção timer
	mov		INTS,r0		; Verifica se é INT do TIMER
	and		#1,r0
	beq		ISR2
	jsr		r7,ISRtim	; Tratamento da INT do TIMER
	and		#hFFFE,INTS	; Desliga bit de INT TIMER
	
	;Interrupção teclado
	mov INTS, r0		;Verifica se é INT do teclado
	and #2, r0			;Compara r0 com 2
	beq	ISR2
	jsr r7, ISRtec		;Tratamento da int do teclado
	and #HFFFD, INTS	;Desliga bit de INT teclado
	
ISR2:

	mov		(r6)+,r5	; Retorna os registradores da pilha
	mov		(r6)+,r4
	mov		(r6)+,r3
	mov		(r6)+,r2
	mov		(r6)+,r1
	mov		(r6)+,r0

	rti					; Return From Interrupt
	

;==========================================================
;	Tratamento das interrupções de timer
;==========================================================
ISRtim:
	inc		Decimos
	cmp		Decimos,#10
	blt		ISRtim_Fim
	clr		Decimos

	inc		Segundo
	cmp		Segundo,#60
	blt		ISRtim_Fim
	clr		Segundo

	inc		Minuto
	cmp		Minuto,#60
	blt		ISRtim_Fim
	clr		Minuto

	inc		Hora
	cmp		Hora,#24
	blt		ISRtim_Fim
	clr		Hora

ISRtim_Fim:
	rts		r7

;==========================================================
;Tratamento da interrupção do teclado
;==========================================================
ISRtec:
	mov TECDT, r0
	cmp #'M', r0
	beq incrementa_minutos
	cmp #'m', r0
	beq incrementa_minutos
	cmp #'H', r0
	beq incrementa_horas
	cmp #'h', r0
	beq	incrementa_horas
	cmp #'Z', r0
	beq zera_horas
	cmp #'z', r0
	beq zera_horas
	cmp #6, r0		;CTRL-F
	beq fim_timer
	
	jmp ISRTEC_fim
	
	
incrementa_minutos:
	inc Minuto
	cmp Minuto, #60
	blt ISRtec_fim
	clr Minuto

incrementa_horas:
	inc Hora
	cmp Hora, #24
	blt ISRtec_fim
	clr Hora
	
zera_horas:
	clr Hora
	clr Minuto
	clr Segundo
	
ISRTEC_fim:
	clr TECST
	rts r7
	
fim_timer:
	mov #1, Saida
	jmp ISRTEC_fim









;===================================================================
;SEGUNDA FUNÇÃO (Leitura de String de teclado com cursor piscante)
;===================================================================
programa2:
;Resetando
	clr		INTS				; Reset pedidos de interrupção
	clr		TECST				; Reset estado do hardware do teclado
	mov		#isrteclado,IVET	; Set Interrupt Service Rotine
	mov 	#250, TIMDT			;Tempo desejado do sinal, 250ms
		
;----------------------------------------------------------
;Limpa o visor
	mov		#36,r4
	mov		#VISOR,r1
loop_reset_teclado:
	mov		#' ',(r1)
	inc		r1
	sob		r4,loop_reset_teclado

;Inicializa o cursor
	mov #VISOR, r4
	mov #0, r5	;Estado inicial do cursor, 0 = invisível, 1 = visível
	
;==========================================================
;	Atualiza as informações da Tecla no visor.
;==========================================================
main_teclado:
	mov		#-1,Tecla2
	mov		#VISOR,r4
	mov		#h83,INTE		
loop_main_teclado:

	cmp		Tecla2,#255
	bhi		loop_main_teclado
	cmp 	Tecla2, #13			;Ctrl-m
	beq		ctrl_m2	
	cmp 	Tecla2, #10
	beq 	ctrl_j2				;Ctrl-j
	cmp 	Tecla2, #8
	beq 	backspace			;Apagar
	cmp		Tecla2, #6
	beq		fim2skip				;Fim do programa 2 CTRL-F
	
	
restomain2:
	;Salva o caractere original
	mov 	Tecla2,(r4)
	inc 	r4
	mov 	(r4), Tecla2auxiliar
	mov 	#'_', (r4)
	mov		#-1,Tecla2
	
	
	;Verifica se o cursor chegou a posição final do VISOR
	mov 	r4, r0
	sub 	#VISOR, r0
	cmp 	r0, #36
	bne 	loop_main_teclado
	
	
	;Limpa o visor e reinicializa a posição do cursor
	jsr 	r7, limpa_visor
	mov		#VISOR,r4
	br		loop_main_teclado
	
fim2skip:
	jmp fim2

	
;Rotina para limpar o visor	
limpa_visor:
	;Limpa o visor
	mov		#36,r4
	mov		#VISOR,r1
loop_reset_teclado_fim:
	mov		#' ',(r1)
	inc		r1
	sob		r4,loop_reset_teclado_fim
	rts 	r7
	
ctrl_j2:
	mov		#36,r0
	mov		#VISOR,r1
loop_reset2:
	mov		#' ',(r1)
	inc		r1
	sob		r0,loop_reset2
	mov 	#-1, Tecla2
	jmp		loop_main_teclado
	
ctrl_m2:
	mov 	Tecla2auxiliar, (r4)
	mov 	#VISOR, r4
	mov 	#-1, Tecla2
	jmp		loop_main_teclado
	
backspace:
	mov 	#-1, Tecla2
	cmp 	#VISOR, r4
	beq 	jmp_main
	mov 	#' ', (r4)
	dec 	r4
	mov 	#' ', (r4)
	jmp 	loop_main_teclado


jmp_main:
	mov 	#VISOR, r4
	jmp		loop_main_teclado

;VARIÁVEIS
Tecla2:					dw	0
Tecla2auxiliar:			dw 	0	;Para guardar o caractere atual e poder mudar com o cursor
Posicao_cursor:			dw 	0	;Guarda a posição atual do cursor
;==========================================================
; Rotina de INTERRUPÇÃO DO TECLADO
;==========================================================
isrteclado:
	mov		r0,-(r6)	; Salva registradores (não é necessário salvar o R5)
	mov		r1,-(r6)
	mov		r2,-(r6)
	mov		r3,-(r6)

	mov		INTS,r0		;Verifica se é INT do TECLADO
	and		#2,r0
	beq		ISR2teclado_timerinterrupt
	jsr		r7,ISRtec_teclado	;Tratamento da INT do TECLADO
	and		#hFFFD,INTS		; Desliga bit de INT TECLADO
	
	jmp ISR2teclado
	
	
ISR2teclado_timerinterrupt:	
	;Interrupção timer
	mov		INTS,r3		; Verifica se é INT do TIMER
	and		#1,r3
	beq		ISR2teclado
	jsr		r7, isrtimerfunc2	; Tratamento da INT do TIMER
	and		#hFFFE,INTS	; Desliga bit de INT TIMER
	
	jmp ISR2teclado
	
	
ISR2teclado:

	; Retorna os registradores da pilha
	mov		(r6)+,r3
	mov		(r6)+,r2
	mov		(r6)+,r1
	mov		(r6)+,r0

	rti					; Return From Interrupt
	
;==========================================================
;	Tratamento das interrupções de teclado
;==========================================================
ISRtec_teclado:
	cmp		Tecla2,#256
	bls		ISRtec_1
	mov		TECDT,Tecla2

ISRtec_1:
	clr		TECST

ISRtec_Fim_teclado:
	rts		r7

	
;==========================================================
;Tratamento das interrupções de timer
;==========================================================
isrtimerfunc2:

	; Alterna o estado do cursor	
	;mov		r5, r3
	;tst		r3
	tst 	r5
	beq		cursor_visivel
	
	; Cursor invisível
	mov		Tecla2auxiliar, (r4)			
	inc		r5
	br		cursor_done
	
cursor_visivel:
	dec		r5
	cmp 	(r4), #'_'
	beq 	skip
	mov		(r4), Tecla2auxiliar	
skip:	
	mov		#'_', (r4)
	
cursor_done:
	rts r7

;===============================================
;Fim do programa 2
fim2:
	mov		#36,r0
	mov		#VISOR,r1
loop_reset_fim2:
	mov		#' ',(r1)
	inc		r1
	sob		r0,loop_reset_fim2
	clr INTE
	clr INTS
	clr TIMDT
	clr TECDT
	clr TECST
	clr r0
	clr r1
	clr r2
	clr r3
	clr r4
	clr r5
	rts r7		
;=================================================






;============================================================================
;Terceira Função (Movimentação de letras no visor com controle de velocidade
;============================================================================
programa3:
	; Resetando
    clr     INTS                ; Reset pedidos de interrupção
    clr     TECST               ; Reset estado do hardware do teclado
	clr 	TECDT				
    mov     #isrteclado3,IVET   ; Set Interrupt Service Routine
    mov     #100, TIMDT         ; Tempo desejado do sinal, 100ms
	
	;Limpa o visor
	mov		#36,r4
	mov		#VISOR,r1
loop_reset_teclado3:
	mov		#' ',(r1)
	inc		r1
	sob		r4,loop_reset_teclado3

;==========================================================
;	Atualiza as informações da Tecla no visor.
;==========================================================
main_teclado3:
	mov		#-1,Tecla3
	mov		#VISOR,r4
	mov		#h82,INTE		
loop_main_teclado3:
	cmp 	Tecla3, #13				;Verificação do ctrl-m
	beq		ctrl_m3
    cmp     Tecla3, #'0'
    beq     jmp_velocidade0
    cmp     Tecla3, #'1'
    beq     jmp_velocidade1
    cmp     Tecla3, #'2'
    beq     jmp_velocidade2
    cmp     Tecla3, #'3'
    beq     jmp_velocidade3
    cmp     Tecla3, #'4'
    beq     jmp_velocidade4
    cmp     Tecla3, #'5'
    beq     jmp_velocidade5
    cmp     Tecla3, #'6'
    beq     jmp_velocidade6
    cmp     Tecla3, #'7'
    beq     jmp_velocidade7
    cmp     Tecla3, #'8'
    beq     jmp_velocidade8
    cmp     Tecla3, #'9'
    beq     jmp_velocidade9
	cmp     Tecla3, #6				;Verificação ctrl-f  FAZER DEPOIS
    ;beq     skipfimprograma3
	br		loop_main_teclado3
	
;skipfimprograma3:
	;jmp 	fimprograma3
	
;Lança o "O" na tela pela primeira vez na primeira posição do visor
ctrl_m3:
	;mov 	contador, contadoraux
	mov 	#VISOR, r4
	mov 	#'O', (r4)
	mov		#-1,Tecla3
	mov 	#H83, INTE
	jmp		loop_main_teclado3
	
jmp_velocidade0:
	jmp 	velocidade0
	
jmp_velocidade1:
	jmp 	velocidade1
	
jmp_velocidade2:
	jmp 	velocidade2
	
jmp_velocidade3:
	jmp 	velocidade3

jmp_velocidade4:
	jmp 	velocidade4
	
jmp_velocidade5:
	jmp 	velocidade5
	
jmp_velocidade6:
	jmp 	velocidade6
	
jmp_velocidade7:
	jmp 	velocidade7
	
jmp_velocidade8:
	jmp 	velocidade8
	
jmp_velocidade9:
	jmp 	velocidade9



	
;==========================================================
;Controle das velocidades
;==========================================================
velocidade0:
	mov 	#10, contador
	mov 	contador, contadoraux
	mov		#-1,Tecla3
	jmp		loop_main_teclado3
	
velocidade1:
	mov 	#9, contador
	mov 	contador, contadoraux
	mov		#-1,Tecla3
	jmp		loop_main_teclado3
	
velocidade2:
	mov 	#8, contador
	mov 	contador, contadoraux
	mov		#-1,Tecla3
	jmp		loop_main_teclado3
	
velocidade3:
	mov 	#7, contador
	mov 	contador, contadoraux
	mov		#-1,Tecla3
	jmp		loop_main_teclado3
	
velocidade4:
	mov 	#6, contador
	mov 	contador, contadoraux
	mov		#-1,Tecla3
	jmp		loop_main_teclado3
	
velocidade5:
	mov 	#5, contador
	mov 	contador, contadoraux
	mov		#-1,Tecla3
	jmp		loop_main_teclado3

velocidade6:
	mov 	#4, contador
	mov 	contador, contadoraux
	mov		#-1,Tecla3
	jmp		loop_main_teclado3

velocidade7:
	mov 	#3, contador
	mov 	contador, contadoraux
	mov		#-1,Tecla3
	jmp		loop_main_teclado3

velocidade8:
	mov 	#2, contador
	mov 	contador, contadoraux
	mov		#-1,Tecla3
	jmp		loop_main_teclado3
	
velocidade9:
	mov 	#1, contador
	mov 	contador, contadoraux
	mov		#-1,Tecla3
	jmp		loop_main_teclado3
	


;==========================================================
;Variáveis
;==========================================================
contador: 			dw 0
contadoraux:		dw 0
Tecla3:				dw 0


;==========================================================
;Rotina de INTERRUPÇÃO DO TECLADO
;==========================================================
isrteclado3:
	mov		r0,-(r6)	; Salva registradores (não é necessário salvar o R5)
	mov		r1,-(r6)
	mov		r2,-(r6)
	mov		r3,-(r6)

	mov		INTS,r0		;Verifica se é INT do TECLADO
	and		#2,r0
	beq		ISRtec_teclado3
	jsr		r7,ISRtec_func3	;Tratamento da INT do TECLADO
	and		#hFFFD,INTS		; Desliga bit de INT TECLADO
	
	jmp 	ISR3teclado
	
	
ISRtec_teclado3:	
	;Interrupção timer
	mov		INTS,r3		; Verifica se é INT do TIMER
	and		#1,r3
	beq		ISR3teclado
	jsr		r7, isrtimerfunc3	;CONFIGURAR
	and		#hFFFE,INTS	; Desliga bit de INT TIMER
	
	jmp 	ISR3teclado
	
	
ISR3teclado:

	; Retorna os registradores da pilha
	mov		(r6)+,r3
	mov		(r6)+,r2
	mov		(r6)+,r1
	mov		(r6)+,r0

	rti					; Return From Interrupt
	
;============================================================
;Tratamento das interrupções de teclado
;============================================================
ISRtec_func3:
	cmp		Tecla3,#256
	bls		ISRtec_3
	mov 	TECDT, Tecla3


ISRtec_3:
	clr		TECST

ISRtec_Fim_teclado3:
	rts		r7

	
;==============================================================
;Tratamento das interrupções de timer
;==============================================================
isrtimerfunc3:
	dec 	contadoraux
	tst 	contadoraux
	beq		reset_counter
	
	
reset_counter:
	mov 	#' ', (r4)
	inc 	r4
	mov		#'O', (r4)
	mov 	contador, contadoraux
	br		isrtimerfunc3_fim
	
isrtimerfunc3_fim:
	rts 	r7	
	

;=================================================================
;Fim do programa 3
fimprograma3:
	mov		#36,r0
	mov		#VISOR,r1
loop_reset_fim3:
	mov		#' ',(r1)
	inc		r1
	sob		r0,loop_reset_fim3
	clr INTE
	clr INTS
	clr TIMDT
	clr TECDT
	clr TECST
	clr r0
	clr r1
	clr r2
	clr r3
	clr r4
	clr r5
	rts r7
;==================================================================	